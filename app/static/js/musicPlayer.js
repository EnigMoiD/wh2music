// Generated by CoffeeScript 1.6.2
(function() {
  var deletable, fillScreen, moveBars, refreshResults, searchable, selectable, sendQuery, sendSelection, sortable, startTiming, stopTiming, updateCurrent, updatePlaylist, updateTime, volumize;

  $(window).resize(function() {
    return fillScreen();
  });

  $(document).ready(function() {
    sortable('.music-bar', '#playlist');
    deletable('.music-bar');
    searchable('#song-search');
    fillScreen();
    $(document).on('keydown', volumize);
    window.socket = io.connect('/updates/');
    socket.on('update', function(data) {
      return updatePlaylist(data);
    });
    socket.on('current_data', function(html) {
      return updateCurrent(html);
    });
    socket.on('search_results', function(results) {
      return refreshResults(results);
    });
    socket.on('error', function(error) {
      return alert(error);
    });
    socket.on('time', function(time) {
      console.log('server update!');
      return updateTime('#time', time);
    });
    socket.on('volume', function(data) {
      return console.log(data);
    });
    socket.on('play', function() {
      return startTiming('#time');
    });
    socket.on('pause', stopTiming);
    $("#next").click(function() {
      return socket.emit('next');
    });
    return startTiming('#time');
  });

  volumize = function(keyEvent) {
    if (keyEvent.ctrlKey && keyEvent.shiftKey && keyEvent.which === 190) {
      return socket.emit('volume', 'up');
    } else if (keyEvent.ctrlKey && keyEvent.shiftKey && keyEvent.which === 188) {
      return socket.emit('volume', 'down');
    }
  };

  startTiming = function(timeable) {
    window.playing = true;
    $("#pause").off('click').click(function() {
      return socket.emit('pause');
    });
    return window.timing = setInterval(function() {
      var min, sec, time;
      min = parseInt($(timeable).children(' #min').text() * 60);
      sec = parseInt($(timeable).children('#sec').text());
      if (isNaN(min) || isNaN(sec)) {
        return null;
      }
      time = min + sec + 1;
      return updateTime(timeable, time);
    }, 1000);
  };

  stopTiming = function() {
    window.playing = false;
    $("#pause").off('click').click(function() {
      return socket.emit('play');
    });
    return clearInterval(window.timing);
  };

  updateTime = function(timeable, time) {
    var sec;
    $(timeable).children('#min').text(Math.floor(time / 60));
    sec = time % 60;
    if (sec < 10) {
      sec = '0' + sec;
    }
    return $(timeable).children('#sec').text(sec);
  };

  deletable = function(deletable) {
    return $(deletable + ' .del-button').off('mousedown').mousedown(function(e) {
      socket.emit('delete', {
        who: $(this).parent().attr('pk')
      });
      return e.stopPropagation();
    });
  };

  searchable = function(searchable) {
    $('#results').click(function() {
      return $(searchable).focus();
    });
    $(searchable).click(function() {
      if ($(searchable).attr('value')) {
        $('#results').addClass('open');
      }
      return false;
    });
    $(searchable).on('keypress', function(e) {
      var end, key, query, start, _ref, _ref1;
      $('#results').addClass('open');
      query = $(searchable).attr('value');
      start = (_ref = this.selectionStart) != null ? _ref : query.length;
      end = (_ref1 = this.selectionEnd) != null ? _ref1 : start;
      key = e.which;
      if (start !== end) {
        query = query.slice(0, start) + query.slice(end);
      }
      query = query.slice(0, start) + String.fromCharCode(key) + query.slice(start);
      return sendQuery(query);
    });
    return $(searchable).on('keydown', function(e) {
      var end, key, me, next, query, start, _ref, _ref1;
      key = e.which;
      query = $(searchable).attr('value');
      me = $('#results .selected');
      switch (key) {
        case 13:
          if (me.length === 1) {
            sendSelection(me);
          }
          return false;
        case 38:
          next = me.prev();
          while (next.hasClass('break')) {
            next = next.prev();
          }
          break;
        case 40:
          next = me.next();
          while (next.hasClass('break')) {
            next = next.next();
          }
      }
      if ((next != null) && next.length === 1) {
        me.removeClass('selected');
        next.addClass('selected');
        return false;
      }
      if (key !== 8 && key !== 46) {
        return true;
      }
      if (query.length <= 1) {
        $('#results').removeClass('open');
        return true;
      }
      start = (_ref = this.selectionStart) != null ? _ref : query.length;
      end = (_ref1 = this.selectionEnd) != null ? _ref1 : start;
      if (start !== end) {
        query = query.slice(0, start) + query.slice(end);
      } else {
        if (key === 8) {
          query = query.slice(0, start - 1) + query.slice(end);
        }
        if (key === 46) {
          query = query.slice(0, start) + query.slice(end + 1);
        }
      }
      return sendQuery(query);
    });
  };

  sendQuery = function(query) {
    var album, album_match, album_reg, artist, artist_match, artist_reg;
    artist_reg = /artist:[^\|]*/i;
    artist_match = artist_reg.exec(query);
    album_reg = /album:[^\|]*/i;
    album_match = album_reg.exec(query);
    if (artist_match && !album_match) {
      artist = artist_match[0].split(':').slice(1).join(':');
      query = query.replace(artist_reg, '').replace(/\|\s*/, '');
      socket.emit('match', {
        what: 'by_artist',
        query: query,
        artist: artist
      });
    }
    if (album_match) {
      album = album_match[0].split(':').slice(1).join(':');
      query = query.replace(album_reg, '').replace(/\|\s*/, '');
      socket.emit('match', {
        what: 'by_album',
        query: query,
        album: album
      });
    }
    if (!(artist_match || album_match)) {
      return socket.emit('match', {
        what: 'all',
        query: query
      });
    }
  };

  selectable = function(selectable) {
    selectable.on('mouseenter', function() {
      selectable.removeClass('selected');
      return $(this).addClass('selected');
    });
    $(document).on('click', function() {
      return $('#results').removeClass('open');
    });
    return selectable.on('click', function(e) {
      var me;
      me = $('#results .selected');
      if (me) {
        return sendSelection(me);
      }
    });
  };

  sortable = function(sortableClass, sortBox) {
    return $(sortableClass).off('mousedown').mousedown(function(e) {
      var center, curZero, me;
      me = $(this);
      center = me.height() / 2;
      curZero = me.offset().top + center;
      me.css('z-index', 10).addClass('selected');
      $(sortBox).bind('mousemove', function(e) {
        var above, below, _ref;
        e.pageY = (_ref = e.pageY) != null ? _ref : e.y + $('body').scrollTop();
        above = me.siblings('[pos="' + (parseInt(me.attr('pos')) - 1) + '"]');
        below = me.siblings('[pos="' + (parseInt(me.attr('pos')) + 1) + '"]');
        if (above.length && e.pageY - 1.5 * center <= above.offset().top) {
          curZero = above.offset().top + center;
          above.before(me);
          above.swap(me, 'pos').toggleClass('greyed');
        } else if (below.length && e.pageY - 0.5 * center >= below.offset().top) {
          curZero = below.offset().top + center;
          below.after(me);
          below.swap(me, 'pos').toggleClass('greyed');
        }
        return me.css({
          top: e.pageY - curZero + 'px'
        });
      });
      return $(document).mouseup(function() {
        var shouldBeGreyed;
        me.css({
          'z-index': 1,
          'top': 0
        }).removeClass('selected');
        shouldBeGreyed = parseInt(me.attr('pos')) % 2 === 0;
        if ((!shouldBeGreyed && me.hasClass('greyed')) || shouldBeGreyed && !me.hasClass('greyed')) {
          me.toggleClass('greyed');
        }
        $(sortBox).unbind('mousemove');
        $(document).unbind('mouseup');
        return socket.emit('move', {
          from: me.attr('pk'),
          to: me.attr('pos')
        });
      });
    });
  };

  sendSelection = function(selection) {
    var prev, searchTerm;
    if (selection.hasClass('song')) {
      socket.emit('add', {
        who: parseInt(selection.attr('pk'))
      });
      $('#results').empty().removeClass('open');
      $('#song-search').get(0).value = '';
      return true;
    } else if (selection.hasClass('back')) {
      $('#results').empty().removeClass('open');
      $('#song-search').get(0).value = '';
      return false;
    } else if (selection.hasClass('album')) {
      searchTerm = 'album: ' + selection.text().split(' by')[0] + ' | ';
    } else if (selection.hasClass('artist')) {
      searchTerm = 'artist: ' + selection.text() + ' | ';
    }
    prev = $('#song-search').get(0).value.split('|').slice(0, -1).join('|');
    if (prev) {
      prev += '| ';
    }
    $('#song-search').get(0).value = prev + searchTerm;
    sendQuery(searchTerm);
    return false;
  };

  refreshResults = function(results) {
    var album, artist, box, select_match, selected, song, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    select_match = $('#results .selected');
    select_match = [select_match.attr('pk', select_match.text())];
    box = $('#results').empty();
    if ((_ref = results.songs) != null ? _ref.length : void 0) {
      box.append('<li class="break">Songs</li>');
      _ref1 = results.songs;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        song = _ref1[_i];
        box.append('<li class="song" pk="' + song[0] + '">' + song[1] + ' <small>by</small> ' + song[2] + '</li>');
      }
    }
    if ((_ref2 = results.artists) != null ? _ref2.length : void 0) {
      box.append('<li class="break">Artists</li>');
      _ref3 = results.artists;
      for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
        artist = _ref3[_j];
        box.append('<li class="artist" pk="' + artist[0] + '">' + artist[1] + '</li>');
      }
    }
    if ((_ref4 = results.albums) != null ? _ref4.length : void 0) {
      box.append('<li class="break">Albums</li>');
      _ref5 = results.albums;
      for (_k = 0, _len2 = _ref5.length; _k < _len2; _k++) {
        album = _ref5[_k];
        box.append('<li class="album" pk="' + album[0] + '">' + album[1] + ' <small>by</small> ' + album[2] + '</li>');
      }
    }
    box.append('<li class="back">Back to Playlist</li>');
    selected = $('#results').children('[pk="' + select_match[0] + '"]');
    if (selected.length) {
      selected = selected.filter(function() {
        return $(this).text() === select_match[1];
      });
    }
    if (!selected.length) {
      selected = $($('#results').children(':not(.break)').get(0));
    }
    selected.addClass('selected');
    return selectable($('#results').children(':not(.break)'));
  };

  updatePlaylist = function(data) {
    var additions, currentSort, current_pk, deletions, finalSort, getLocalPlaylist, i, local, movements, pk, remote, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1;
    current_pk = $('#current').attr('pk');
    if (parseInt(current_pk) !== data.current) {
      socket.emit('current_request');
    }
    getLocalPlaylist = function() {
      var pks, selection;
      selection = $('#playlist').children('.music-bar');
      pks = [];
      selection.each(function() {
        return pks.push(parseInt($(this).attr('pk')));
      });
      return pks;
    };
    remote = data.playlist;
    local = getLocalPlaylist();
    _ref = [[], []], finalSort = _ref[0], currentSort = _ref[1];
    for (i = _i = 0, _len = remote.length; _i < _len; i = ++_i) {
      pk = remote[i];
      finalSort[pk] = i;
    }
    for (i = _j = 0, _len1 = local.length; _j < _len1; i = ++_j) {
      pk = local[i];
      currentSort[pk] = i;
    }
    _ref1 = [[], [], []], movements = _ref1[0], deletions = _ref1[1], additions = _ref1[2];
    for (_k = 0, _len2 = local.length; _k < _len2; _k++) {
      pk = local[_k];
      if (finalSort[pk] == null) {
        deletions.push(pk);
      }
    }
    for (i = _l = 0, _len3 = remote.length; _l < _len3; i = ++_l) {
      pk = remote[i];
      if (currentSort[pk] == null) {
        additions[pk] = i;
      }
    }
    for (i = _m = 0, _len4 = remote.length; _m < _len4; i = ++_m) {
      pk = remote[i];
      if (local[i] !== pk && (additions[pk] == null)) {
        movements[pk] = i;
      }
    }
    return moveBars(movements, deletions, additions, finalSort);
  };

  updateCurrent = function(html) {
    $('#time').remove();
    return $('#current').animate({
      opacity: 0
    }, {
      duration: 250,
      complete: function() {
        $(this).replaceWith(html);
        return $('#current').css({
          opacity: 0
        }).animate({
          opacity: 1
        }, 250);
      }
    });
  };

  moveBars = function(movements, deletions, additions, finalSort) {
    var bar, donified, parent, pk, plist, required, settle, settle_once_done, target, time, whereTo, _i, _j, _k, _len, _len1, _len2;
    time = 400;
    parent = $('#playlist');
    plist = $('#playlist').children('.music-bar');
    donified = 0;
    required = 0;
    for (pk = _i = 0, _len = movements.length; _i < _len; pk = ++_i) {
      whereTo = movements[pk];
      if (!(whereTo != null)) {
        continue;
      }
      ++required;
      bar = plist.filter('[pk="' + pk + '"]');
      target = plist.filter('[pos="' + whereTo + '"]').offset().top - bar.offset().top;
      if (whereTo % 2 === 0) {
        bar.animate({
          top: target,
          backgroundColor: '#F0F0F0'
        }, {
          duration: time,
          complete: function() {
            return ++donified;
          }
        });
      } else {
        bar.animate({
          top: target,
          backgroundColor: '#FFFFFF'
        }, {
          duration: time,
          complete: function() {
            return ++donified;
          }
        });
      }
    }
    for (_j = 0, _len1 = deletions.length; _j < _len1; _j++) {
      pk = deletions[_j];
      ++required;
      bar = plist.filter('[pk="' + pk + '"]');
      bar.animate({
        opacity: 0
      }, {
        duration: 500,
        complete: function() {
          return ++donified;
        }
      });
    }
    for (pk = _k = 0, _len2 = additions.length; _k < _len2; pk = ++_k) {
      whereTo = additions[pk];
      if (!(whereTo != null)) {
        continue;
      }
      ++required;
      socket.once('song_data', function(html) {
        bar = $(html).appendTo(parent);
        if (pk % 2 === 0) {
          bar.addClass('greyed');
        }
        return bar.css({
          opacity: 0
        }).animate({
          opacity: 1
        }, {
          duration: 500,
          complete: function() {
            return ++donified;
          }
        });
      });
      socket.emit('song_request', pk);
    }
    settle_once_done = function() {
      if (donified < required) {
        return setTimeout(settle_once_done, 50);
      } else {
        return settle();
      }
    };
    settle = function() {
      var _l, _len3;
      for (_l = 0, _len3 = deletions.length; _l < _len3; _l++) {
        pk = deletions[_l];
        plist.filter('[pk="' + pk + '"]').remove();
      }
      plist = $('#playlist').children('.music-bar');
      plist.sortElements(function(a, b) {
        if (finalSort[parseInt($(a).attr('pk'))] > finalSort[parseInt($(b).attr('pk'))]) {
          return 1;
        } else {
          return -1;
        }
      });
      plist.css('top', 0).attr('pos', function() {
        return finalSort[parseInt($(this).attr('pk'))];
      });
      plist.each(function() {
        if (parseInt($(this).attr('pos')) % 2 === 0) {
          $(this).addClass('greyed');
        } else {
          $(this).removeClass('greyed');
        }
        return $(this).attr('style', '');
      });
      sortable('.music-bar', '#playlist');
      return deletable('.music-bar');
    };
    return settle_once_done();
  };

  fillScreen = function() {
    var main;
    main = $('#main');
    return main.height($(window).height() - main.offset().top - $('#uploadbox').height() - 32);
  };

}).call(this);
